IF we can get reading and writing data working, data about the number of watches for each charity will appear here
This data was loaded from a seperate file on the github repositiory.





/* dump
//wait until the video has been playing for 30 seconds before allowinng the user
//to load the next video, so that the view is actually counted
$(".video-frame").click(function(){
    $("#next-ad").attr('disabled',true);
    console.log('vidframeclicked');
    setTimeout(function(){
        $("#next-ad").attr('disabled',false);

    },2000);
});
$(".video-frame").click(function(){
    $("#next-ad").attr('disabled',true);
    console.log('vidframeclicked');
    setTimeout(function(){
        $("#next-ad").attr('disabled',false);

    },2000);
});


//not in use
function addClickTimer(id){
    $(id).contents().on("mousedown, mouseup, click",function(){
        console.log("vid clicked");
        setTimeout(function(){
            $("#next-ad").attr('disabled',false);
            $("#next-ad").html('Next Ad');
        },2000)
    });
};

$('#test').click(function (){
    loadDoc("data.txt", "#testwrite");
});

function clickVideos(){
    var distIn = 10;
    //loop through iframes

    for (var i = 1; i<=noVideos;i++){
        el =$('#vid1').get(0);
        console.log(el);
        // get some coords inside them
        topleft = getOffset(el);
        x = topleft[0] +distIn
        y = topleft[1] +distIn
        console.log(topleft);
        clickAt(x,y);
    };
};
//click the video hack?


var simulateMouseEvent = function(element, eventName, coordX, coordY) {
  element.dispatchEvent(new MouseEvent(eventName, {
    view: window,
    bubbles: true,
    cancelable: true,
    clientX: coordX,
    clientY: coordY,
    button: 0
  }));
};


function simulateClick(x, y) {
    console.log("clickAt:",x,y);
    var clickEvent = document.createEvent('MouseEvents');
    clickEvent.initMouseEvent('click', true, true, window, 0, 0, 0, x, y, false, false, false, false, 0, null);
    console.log(clickEvent);
    console.log(document.elementFromPoint(x, y));
    document.elementFromPoint(x, y).dispatchEvent(clickEvent);
};
function clickVideos(){
    el =$('#vid1').get(0);
    console.log(el);
    // get some coords inside them
    position = getOffset(el);
    x = position[0] +1.34211;
    y = position[1]-2.1238;
    console.log(position);
    simulateClick(x,y);

    simulateMouseEvent (el, "mousedown", x, y);
    simulateMouseEvent (el, "mouseup", x, y);
    simulateMouseEvent (el, "click", x, y);

};

$('#play-videos').click(clickVideos);

function clickAt(x, y){
    //adapted from user2067021 on stack overflow
    //create click event
    var ev = new MouseEvent('click', {
        'view': window,
        'bubbles': true,
        'cancelable': true,
        'screenX': x,
        'screenY': y
    });
    //dispatch click to element
    var el = document.elementFromPoint(x, y);
    el.dispatchEvent(ev);
};


function getOffset(el) {
    var box = el.getBoundingClientRect()
    x = box.left + (box.right - box.left) / 2,
    y = box.top + (box.bottom - box.top) / 2;
    return [x,y]
};
$('#play-videos').click(clickVideos);
*/
